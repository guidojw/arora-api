#!/usr/bin/env node
'use strict'
const app = require('../app')
const debug = require('debug')('nsadmin-api:server')
const http = require('http')
const cron = require('node-schedule')
const robloxManager = require('../app/managers/roblox')
const WebSocket = require('ws')
const webSocketManager = require('../app/managers/web-socket')

const cronConfig = require('../config/cron')

const models = require('../app/models')
const { Op } = require('sequelize')
// models.sequelize.sync({ force: true })
// models.SuspensionCancellation.findAll().then(console.log)
// models.Suspension.create({ userId: 1, date: Date.now(), rank: 1, rankBack: false, reason: 'test', authorId: 2, duration: 86400000 }).then(console.log)
// models.Suspension.findOne({ where: { date: { [Op.gt]: Date.now() }}}).then(console.log)
// models.SuspensionCancellation.create({ authorId: 1, reason: 'reason', suspensionId: 1 }).then(console.log)
// models.Ban.create({ userId: 1, reason: 'reason', rank: 2, authorId: 1, date: Date.now() })
// models.BanCancellation.findAll().then(console.log)
// models.BanCancellation.create({ banId: 1, reason: 'reason', authorId: 1 }).then(console.log)
// models.Ban.findAll().then(console.log)
// models.Suspension.findByPk(2).then(suspension => {
//     console.log(suspension.date)
//     suspension.endDate.then(console.log)
// })
// models.Suspension.findAll().then(console.log)
models.Suspension.findByPk(2).then(suspension => {
    suspension.update({ reason: 'hi tes022t1'}, { individualHooks: true, editorId: 1 })
})

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

const server = http.createServer(app)
const wss = new WebSocket.Server({ server, path: '/api/v1' })

robloxManager.init()

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

webSocketManager.init()
wss.on('connection', webSocketManager.addConnection)

for (const job of Object.values(cronConfig)) {
    if (job.hasOwnProperty('args')) {
        const [...args] = job.args
        cron.scheduleJob(job.expression, () => job.job(...args))
    } else {
        cron.scheduleJob(job.expression, job.job)
    }
}

function normalizePort(val) {
    const port = parseInt(val, 10)
    if (isNaN(port)) return val
    if (port >= 0) return port
    return false
}

function onError(error) {
    if (error.syscall !== 'listen') throw error
    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    debug('Listening on ' + bind)
}
