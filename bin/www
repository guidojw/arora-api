#!/usr/bin/env node
'use strict'
const app = require('../app')
const debug = require('debug')('nsadmin-api:server')
const http = require('http')
const cron = require('node-schedule')
const robloxManager = require('../app/managers/roblox')
const WebSocket = require('ws')
const webSocketManager = require('../app/managers/web-socket')

const cronConfig = require('../config/cron')

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

const server = http.createServer(app)
const wss = new WebSocket.Server({ server, path: '/api/v1' })

robloxManager.init()

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

webSocketManager.init()
wss.on('connection', webSocketManager.addConnection)

for (const job of Object.values(cronConfig)) {
    if (job.hasOwnProperty('args')) {
        const [...args] = job.args
        cron.scheduleJob(job.expression, () => job.job(...args))
    } else {
        cron.scheduleJob(job.expression, job.job)
    }
}

function normalizePort(val) {
    const port = parseInt(val, 10)
    if (isNaN(port)) return val
    if (port >= 0) return port
    return false
}

function onError(error) {
    if (error.syscall !== 'listen') throw error
    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    debug('Listening on ' + bind)
}
