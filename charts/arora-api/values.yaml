# Default values for arora-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/guidojw/arora-api
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

hooks:
  dbMigrate:
    enabled: true

migrationJob:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  exec:
    command:
    - cat
    - /tmp/healthy
  initialDelaySeconds: 5
  periodSeconds: 5
readinessProbe:
  exec:
    command:
    - cat
    - /tmp/healthy
  initialDelaySeconds: 5
  periodSeconds: 5

# Additional volumes on the output Deployment definition.
volumes:
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false
- name: auth-keys
  secret:
    secretName: auth-keys

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
- name: auth-keys
  mountPath: /opt/app/keys
  readOnly: true

# Additional env on the output Deployment definition.
env:
# - name: POD_NAME
#   valueFrom:
#     fieldRef:
#       fieldPath: metadata.name
- name: PORT
  value: "80"
- name: POSTGRES_HOST
  value: arora-api-postgresql.{{ .Release.Namespace }}.svc.cluster.local
- name: POSTGRES_USER
  value: arora
- name: POSTGRES_PASSWORD
  valueFrom:
    secretKeyRef:
      name: postgres-auth
      key: password
- name: KEY_DIR
  value: /opt/app/keys
- name: ROBLOX_API_KEY
  valueFrom:
    secretKeyRef:
      name: roblox-auth
      key: api-key
- name: ROBLOX_COOKIE
  valueFrom:
    secretKeyRef:
      name: roblox-auth
      key: cookie
- name: DISCORD_WEBHOOK_URL
  valueFrom:
    secretKeyRef:
      name: discord-webhook
      key: url
- name: SENTRY_DSN
  valueFrom:
    secretKeyRef:
      name: sentry-auth
      key: dsn
- name: MAIN_HEALTH_CHECK_URL
  valueFrom:
    secretKeyRef:
      name: health-checks
      key: main
      optional: true
- name: ACCEPT_JOIN_REQUESTS_JOB_HEALTH_CHECK_URL
  valueFrom:
    secretKeyRef:
      name: health-checks
      key: accept-join-requests-job
      optional: true

nodeSelector: {}

tolerations: []

affinity: {}

extraObjects:
- |
  apiVersion: cert-manager.io/v1
  kind: Certificate
  metadata:
    name: {{ include "arora-api.fullname" . }}-cert
  spec:
    secretName: {{ include "arora-api.fullname" . }}-cert
    dnsNames:
    - "{{ .Values.ingressHost }}"
    issuerRef:
      name: letsencrypt-production
      kind: ClusterIssuer
- |
  apiVersion: traefik.io/v1alpha1
  kind: IngressRoute
  metadata:
    name: {{ include "arora-api.fullname" . }}-web
  spec:
    entryPoints:
    - web
    - websecure
    routes:
    - match: Host(`{{ .Values.ingressHost }}`) && PathPrefix(`/api`)
      kind: Rule
      middlewares:
      - name: api-strip
        namespace: traefik
      services:
      - name: {{ include "arora-api.fullname" . }}-web
        port: 80
    tls:
      secretName: {{ include "arora-api.fullname" . }}-cert

postgresql:
  image:
    pullSecrets:
    - name: docker-pull

  auth:
    username: arora
    database: arora_api
    existingSecret: postgres-auth

  primary:
    initdb:
      scripts:
        00_grant_role.sql: |
          GRANT CONNECT ON DATABASE arora_api TO arora;

    persistence:
      storageClass: local-path-retain
